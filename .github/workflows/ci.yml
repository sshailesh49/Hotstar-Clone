name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'K8S/**'
  pull_request:
    branches:
      - main

permissions:
   contents: read
   pull-requests: write


env:
  IMAGE_TAG: ${GITHUB_SHA}
  IMAGE: shailesh49/hotstar:$IMAGE_TAG
  REPO_IMAGE_LATEST: hotstar/netflix:latest
  DOCKER_SCOUT_CACHE_DIR: /tmp/docker-scout-cache
  SCOUT_BIN: ${{ github.workspace }}/.scout-bin

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # -------- Workspace --------
      - name: Checkout Code
        uses: actions/checkout@v3

   

      # -------- Install Dependencies --------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install

         # -------- OWASP Dependency Check --------
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
         project: "hotstar"
         path: "."
         format: "ALL"
         out: "reports"
         args: "--disableYarnAudit"

      - name: Upload Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/**


      # 2 Setup JDK (SonarQube Scanner needs Java)
      # - name: Setup JDK
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: temurin
      #     java-version: '17'
      # #  SonarQube Analysis
      # - name: SonarQube Analysis
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # same as sonar-token in Jenkins
      #   with:
      #     args: >
      #       -Dsonar.host.url=https://sonar-server   # replace with your SonarQube server
      #       -Dsonar.projectKey=netflix             
      #       -Dsonar.projectName=netflix             
      #       -Dsonar.sources=.
      # # ---- SonarQube Quality Gate Check ---
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: https://sonar-server

      # Build Docker Images 
      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE }} .
       #  Setup Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.4
        with:
         version: v0.66.0   # Optional: pin to a specific Trivy version
         cache: true        # Optional: enable caching

      # -------- Trivy --------
      # - name: Install Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     version: latest

      - name: Trivy FS Scan
        run: trivy fs --exit-code 0 --severity HIGH,CRITICAL --format json --output reports/trivy-fs.json .

      # - name: Trivy Image Scan (Docker Image)
      #   run: trivy image --exit-code 0 --no-progress ${{ env.REPO_IMAGE }}

        # Optional: Fail on high/critical vulnerabilities
      - name: Trivy Image Scan (fail on HIGH/CRITICAL)
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL --format json --output reports/trivy-image.json ${{ env.REPO_IMAGE }}

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: reports/trivy-*.json

      # -------- Docker Build & Push --------
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
           echo "Building and pushing $IMAGE"
           docker push $IMAGE
           echo $IMAGE > image.txt

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.txt
          

      # Docker Generate Scout CVEs
      - name: Run Docker Scout CVEs analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.IMAGE }}
          only-severities: critical,high
          only-fixed: true
          output: reports/docker-scout-cves.json
          github-token: ${{ secrets.GITHUB_TOKEN }}


      #  Generate  Docker Scout SBOM
      - name: Generate Docker SBOM
        uses: docker/scout-action@v1
        with:
          command: sbom
          image: ${{ env.IMAGE }}
          output: reports/docker-scout-sbom.json
      # 
      - name: Upload Docker Scout Reports
        uses: actions/upload-artifact@v4
        with:
         name: docker-scout-reports
         path: reports/docker-scout-*.json

      # # -------- Email Security Reports --------
      # - name: Send Security Reports via Email
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: ${{ secrets.EMAIL_USER }}
      #     password: ${{ secrets.EMAIL_PASS }}
      #     subject: "Security Reports - Netflix CI Run #${{ github.run_number }}"
      #     to: "your-email@example.com"
      #     from: "GitHub CI <${{ secrets.EMAIL_USER }}>"
      #     body: |
      #       Hi Team,

      #       Please find attached the security reports generated in this CI run:

      #       - Dependency Check (OWASP)
      #       - Trivy (FS + Image)
      #       - Docker Scout (CVEs + SBOM)

      #       Regards,  
      #       GitHub Actions CI
      #     attachments: |
      #       reports/dependency-check/*
      #       reports/trivy-*.json
      #       reports/docker-scout-*.json

   
      




